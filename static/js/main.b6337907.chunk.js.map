{"version":3,"sources":["breakTime.mp3","App.js","reportWebVitals.js","index.js"],"names":["Controls","timerOn","timerControl","resetTime","id","className","onClick","App","useState","sessionTime","setSessionTime","breakTime","setBreakTime","displayTime","setDisplayTime","setTimerOn","onBreak","setOnBreak","audioSrc","audioFile","player","useRef","useEffect","playSound","currentTime","play","prev","Math","floor","time","minutes","seconds","formatTime","Date","getTime","nextDate","onBreakVariable","interval","setInterval","localStorage","clear","setItem","clearInterval","getItem","pause","ref","t","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6337907.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/breakTime.8030d30f.mp3\";","\nimport { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport audioFile from \"./breakTime.mp3\";\n\nfunction App() {\n  const [sessionTime, setSessionTime] = useState(25*60);\n  const [breakTime, setBreakTime] = useState(5*60);\n  const [displayTime, setDisplayTime] = useState(25*60);\n  const [timerOn, setTimerOn] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n  \n  const audioSrc = audioFile;\n\n  let player = useRef(null);\n\n  useEffect(() => {\n    if (displayTime <= 0) {\n      setOnBreak(true);\n      playSound();\n    } else if (!timerOn && displayTime === breakTime) {\n      setOnBreak(false);\n    }\n    \n  }, [displayTime, onBreak, timerOn, breakTime, sessionTime]);\n\n  const playSound = () => {\n    player.currentTime = 0;\n    player.play();  \n  }\n\n  const increaseSeasion = () => {\n    if(sessionTime >= 60*60){\n      return;\n    }\n    setSessionTime(prev => prev +60);\n    setDisplayTime(prev => prev +60)\n  }\n\n  const decreaseSession = () => {\n    if(sessionTime <= 60){\n      return;\n    }\n    setSessionTime(prev => prev -60)\n    setDisplayTime(prev => prev -60)\n  }\n\n  const increaseBreakTime = () => {\n    if(breakTime >= 60*60){\n      return;\n    }\n    setBreakTime(prev => prev +60)\n  }\n\n  const decreaseBreakTime = () => {\n    if(breakTime < 2*60){\n      return;\n    }\n    setBreakTime(prev => prev -60)\n  }\n\n  const formatTime = (time) => {\n    let minutes = Math.floor(time/60);\n    let seconds = time % 60;\n    return (\n      (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds)\n    )\n  }\n\n\n  const timerControl = () =>{\n\n    let second = 1000;\n    let date = new Date().getTime();\n    let nextDate = new Date().getTime() + second;\n    let onBreakVariable = onBreak;\n\n    if(!timerOn){\n        let interval = setInterval(()=> {\n            date = new Date().getTime();\n            if(date > nextDate){\n                setDisplayTime(prev => {\n                    if(prev <= 0 && !onBreakVariable){\n                        //playSound();\n                        onBreakVariable = true;\n                        setOnBreak(true);\n                        return breakTime;\n                    } else if(prev <= 0 && onBreakVariable){\n                        //playSound();\n                        onBreakVariable = false;\n                        setOnBreak(false);\n                        return sessionTime;\n                    }\n                    return prev - 1})\n                nextDate += second;\n            }\n        }, 30);\n        localStorage.clear();\n        localStorage.setItem(\"interval-id\", interval)\n    }\n\n    if(timerOn){\n        clearInterval(localStorage.getItem(\"interval-id\"))\n    }\n    setTimerOn(!timerOn);\n};\n\n \n  const resetTime = () =>{\n    clearInterval(localStorage.getItem(\"interval-id\"));\n    setSessionTime(25*60);\n    setBreakTime(5*60);\n    setDisplayTime(25*60);\n    player.pause(); \n    player.currentTime = 0;    \n    setTimerOn(false);\n    setOnBreak(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"header\">\n        <h1>25+5 Clock</h1>\n      </div>\n      <div className=\"timers\">\n        <div className=\"break container\" id=\"break-label\">\n          <h2 className=\"headers\">Break Lenght</h2>\n          <div className=\"arrows\">\n            <i className=\"fas fa-arrow-up\" id=\"break-increment\" onClick={increaseBreakTime}></i>\n            <p id=\"break-length\">{Math.floor(breakTime/60)}</p>\n            <i className=\"fas fa-arrow-down\" id=\"break-decrement\" onClick={decreaseBreakTime}></i>\n          </div>\n        </div>\n\n        <div className=\"session container\" id=\"session-label\" >\n          <h2 className=\"headers\">Session Lenght</h2>\n          <div className=\"arrows\">\n            <i className=\"fas fa-arrow-up\" id=\"session-increment\" onClick={increaseSeasion}></i>\n            <p id=\"session-length\">{Math.floor(sessionTime/60)}</p>\n            <i className=\"fas fa-arrow-down\" id=\"session-decrement\" onClick={decreaseSession}></i>\n          </div>\n        </div>\n      </div>\n\n      <div id=\"clock-container\">\n        <h2 id=\"timer-label\">{onBreak ? \"Break\" : \"Session\"}</h2>\n        <p id=\"time-left\">{formatTime(displayTime)}</p>\n      </div>\n\n      <div>\n        <Controls timerOn={timerOn} timerControl={timerControl} resetTime={resetTime} />\n      </div>\n      <audio ref={(t) => (player = t)} src={audioSrc} id=\"beep\" />\n    </div>\n  );\n}\n\nfunction Controls ({timerOn, timerControl, resetTime}){\n  return(\n    <div id=\"controls\">\n      <i id=\"start_stop\" className={timerOn ? \"fas fa-pause\" :\"fas fa-play\"} onClick={timerControl}></i>\n      <i id=\"reset\" className=\"fas fa-sync\" onClick={resetTime}></i>\n    </div>\n\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}